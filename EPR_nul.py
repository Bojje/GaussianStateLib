from GaussianStateClass import *
import numpy as np
modes = 10
runs = 10
squeezing = np.linspace(0, 0.5, runs)
A_modes = [n * 2 - 1 for n in range(1,int(modes/2) + 1)]
B_modes = [n * 2 for n in range(1,int(modes/2) + 1)]

# creating vectors to store the variances for the EPR state
var_q = np.zeros(runs)
var_p = np.zeros(runs)
m_A = 1
m_B = 1
for i, sq in enumerate(squeezing):
    g = GaussianState(modes=modes)
    # EPR state tests
    # for n in A_modes:
    # Squeezing in the position quadrature
    # for modes in channel A
    g.single_mode_squeeze(sq,0, modes=[1])
    # g.plot_wigner_func(start= -4, stop=4, modes=[1])
    g_old = g.sigma
    # print(n)
    # for n in B_modes:
    # Squeezing modes in channel B
    g.single_mode_squeeze(sq, 0, modes=[2])
    # Phase rotation in channel B
    g.phase_shift(np.pi / 2, modes=[2])

    # BS1
    # for n_a, n_b in zip(A_modes, B_modes):
    g.beam_split(0.5, modes=[1, 2])

    var_q[i] = g.s('Ax', 1, 'Ax', 1) + g.s('Bx', 1, 'Bx', 1) + 2 * g.s('Bx', 1, 'Ax', 1)
    var_p[i] = g.s('Ap', 1, 'Ap', 1) + g.s('Bp', 1, 'Bp', 1) - 2 * g.s('Bp', 1, 'Ap', 1)


import matplotlib.pyplot as plt
plt.plot(squeezing, var_p, 'x')
plt.plot(squeezing, np.exp(-2 * squeezing), label='Expected')
plt.title('var($\hat{n}^p$) for an EPR state')
plt.xlabel('Squeezing (r)')
plt.ylabel('var($\hat{n}^p$)')
plt.show()


plt.plot(squeezing, var_q, 'x', label='Generated by Gaussian class')
plt.plot(squeezing, np.exp(-2 * squeezing), label='Expected')
#modes_first = [[i * 2- 2, i * 2 - 1] for i in modes]]
plt.legend()
plt.title('var($\hat{n}^q$) for an EPR state')
plt.xlabel('Squeezing (r)')
plt.ylabel('var($\hat{n}^q$)')
plt.show()
